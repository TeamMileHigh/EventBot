/// <reference types="node" />
import { DecodedMessage } from "@xmtp/xmtp-js";
import { Json } from "../types.js";
import { DB, Message, MessageStatus } from "./types.js";
export declare function findOrCreateBot(db: DB, name: string): Promise<{
    id: string;
    state: Json;
}>;
export declare function findConversation(db: DB, peerAddress: string, topic: string, botId: string): import("drizzle-orm/pg-core/index.js").PgSelect<"conversations", {
    id: import("drizzle-orm/pg-core/index.js").PgColumn<{
        name: "id";
        tableName: "conversations";
        dataType: "number";
        columnType: "PgSerial";
        data: number;
        driverParam: number;
        notNull: true;
        hasDefault: true;
        enumValues: undefined;
        baseColumn: never;
    }, {}, {}>;
}, "partial", Record<"conversations", "not-null">>;
export declare function createConversation(db: DB, peerAddress: string, topic: string, botId: string): import("drizzle-orm/pg-core/index.js").PgInsert<import("drizzle-orm/pg-core/table.js").PgTableWithColumns<{
    name: "conversations";
    schema: undefined;
    columns: {
        id: import("drizzle-orm/pg-core/index.js").PgColumn<{
            name: "id";
            tableName: "conversations";
            dataType: "number";
            columnType: "PgSerial";
            data: number;
            driverParam: number;
            notNull: true;
            hasDefault: true;
            enumValues: undefined;
            baseColumn: never;
        }, {}, {}>;
        peerAddress: import("drizzle-orm/pg-core/index.js").PgColumn<{
            name: "peer_address";
            tableName: "conversations";
            dataType: "string";
            columnType: "PgText";
            data: string;
            driverParam: string;
            notNull: true;
            hasDefault: false;
            enumValues: [string, ...string[]];
            baseColumn: never;
        }, {}, {}>;
        topic: import("drizzle-orm/pg-core/index.js").PgColumn<{
            name: "topic";
            tableName: "conversations";
            dataType: "string";
            columnType: "PgText";
            data: string;
            driverParam: string;
            notNull: true;
            hasDefault: false;
            enumValues: [string, ...string[]];
            baseColumn: never;
        }, {}, {}>;
        botId: import("drizzle-orm/pg-core/index.js").PgColumn<{
            name: "bot_id";
            tableName: "conversations";
            dataType: "string";
            columnType: "PgText";
            data: string;
            driverParam: string;
            notNull: true;
            hasDefault: false;
            enumValues: [string, ...string[]];
            baseColumn: never;
        }, {}, {}>;
        state: import("drizzle-orm/pg-core/index.js").PgColumn<{
            name: "state";
            tableName: "conversations";
            dataType: "json";
            columnType: "PgJson";
            data: Json;
            driverParam: unknown;
            notNull: true;
            hasDefault: true;
            enumValues: undefined;
            baseColumn: never;
        }, {}, {}>;
    };
    dialect: "pg";
}>, import("drizzle-orm/postgres-js/session.js").PostgresJsQueryResultHKT, import("drizzle-orm/query-builders/select.types.js").SelectResultFields<{
    id: import("drizzle-orm/pg-core/index.js").PgColumn<{
        name: "id";
        tableName: "conversations";
        dataType: "number";
        columnType: "PgSerial";
        data: number;
        driverParam: number;
        notNull: true;
        hasDefault: true;
        enumValues: undefined;
        baseColumn: never;
    }, {}, {}>;
}>>;
export declare function findOrCreateConversation(db: DB, peerAddress: string, topic: string, botName: string): Promise<{
    id: number;
}>;
export declare function getAndLockBot(db: DB, name: string): Promise<{
    id: string;
    state: Json;
}>;
export declare function getAndLockConversation(db: DB, conversationId: number): Promise<{
    id: number;
    state: Json;
    peerAddress: string;
    topic: string;
    botId: string;
}>;
export declare function setConversationState(db: DB, conversationId: number, state: Json): Promise<void>;
export declare function setBotState(db: DB, botId: string, state: Json): Promise<void>;
export declare function insertMessage(db: DB, xmtpMessage: DecodedMessage, botId: string, conversationId: number, status: MessageStatus, replyToId: number | null): Promise<{
    id: number;
    botId: string;
    messageId: string;
    contents: Buffer;
    contentsText: string | null;
    status: "unprocessed" | "processed" | "expired" | "error" | "reply";
    timestamp: Date;
    numRetries: number;
    conversationId: number;
    replyToId: number | null;
}>;
export declare function findMostRecentMessage(db: DB, topic: string): Promise<Message | null>;
export declare function findUnprocessedMessages(db: DB, botId: string, maxRetries: number): Promise<{
    id: number;
    botId: string;
    messageId: string;
    contents: Buffer;
    contentsText: string | null;
    status: "unprocessed" | "processed" | "expired" | "error" | "reply";
    timestamp: Date;
    numRetries: number;
    conversationId: number;
    replyToId: number | null;
}[]>;
export declare function setMessageStatus(db: DB, messageId: number, status: MessageStatus): Promise<void>;
export declare function setMessageNumRetries(db: DB, messageId: number, numRetries: number): Promise<void>;
export declare function findValue(db: DB, key: string): Promise<Buffer | null>;
export declare function setValue(db: DB, key: string, value: Buffer): Promise<void>;
//# sourceMappingURL=operations.d.ts.map