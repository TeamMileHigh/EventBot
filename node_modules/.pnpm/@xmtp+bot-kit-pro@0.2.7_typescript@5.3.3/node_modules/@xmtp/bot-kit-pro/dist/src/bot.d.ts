import { Client, DecodedMessage, Persistence } from "@xmtp/xmtp-js";
import { PostgresJsDatabase } from "drizzle-orm/postgres-js";
import pino from "pino";
import { BotConfig, BotCreateConfig } from "./config.js";
import HandlerContext from "./context.js";
import { DB, Message as DBMessage } from "./db/types.js";
import { Json } from "./types.js";
export type BotHandler = (ctx: HandlerContext<Json, Json>) => Promise<void>;
export default class Bot {
    name: string;
    client: Client;
    db: PostgresJsDatabase;
    handler: BotHandler;
    stream?: AsyncGenerator<DecodedMessage>;
    logger: pino.Logger;
    config: Required<BotConfig>;
    running: boolean;
    constructor(name: string, client: Client, db: PostgresJsDatabase, config: Required<BotConfig>);
    static create(config: BotCreateConfig, datasource: PostgresJsDatabase): Promise<Bot>;
    get address(): string;
    saveMessage(message: DecodedMessage): Promise<{
        dbConvoId: number;
        dbMessageId: number;
        xmtpMessage: DecodedMessage;
    }>;
    processMessages(): Promise<number>;
    processMessage(parentTx: DB, message: DBMessage): Promise<void>;
    private mostRecentMessage;
    private initialize;
    start(): Promise<void>;
    private listen;
    private retryProcessingLoop;
    stop(): Promise<void>;
    private isExpired;
}
export declare function getOrCreateXmtpKeys(name: string, env: string, persistence: Persistence): Promise<Uint8Array>;
//# sourceMappingURL=bot.d.ts.map